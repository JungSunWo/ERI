-- =====================================================
-- ERI 암호화 관련 DDL (PostgreSQL)
-- 직원번호, 직원명 암호화 통합 테이블
-- =====================================================

-- 데이터베이스 생성 (PostgreSQL에서는 CREATE DATABASE를 별도로 실행)
-- Database: eri_enc_db
-- DROP DATABASE IF EXISTS eri_enc_db;

CREATE DATABASE eri_enc_db
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'Korean_Korea.949'
    LC_CTYPE = 'Korean_Korea.949'
    LOCALE_PROVIDER = 'libc'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;



-- 통합 직원 암호화 테이블 (직원번호, 직원명, 이메일 포함)
CREATE TABLE TB_EMP_ENCRYPT (
    EMP_SEQ BIGSERIAL NOT NULL,
    ORIG_EMP_NO VARCHAR(100) NOT NULL,
    ENCRYPT_EMP_NO VARCHAR(255) NOT NULL,
    ORIG_EMP_NM VARCHAR(100) NOT NULL,
    RANDOM_EMP_NM VARCHAR(100) NOT NULL,
    ORIG_EMP_EMAIL VARCHAR(200),
    ENCRYPT_ALGORITHM VARCHAR(50) NOT NULL,
    ENCRYPT_KEY_ID VARCHAR(50),
    ENCRYPT_IV VARCHAR(100),
    ENCRYPT_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    DEL_YN CHAR(1) NOT NULL DEFAULT 'N',
    DEL_DATE TIMESTAMP,
    UPD_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (EMP_SEQ)
);

COMMENT ON TABLE TB_EMP_ENCRYPT IS '통합 직원 암호화 테이블';
COMMENT ON COLUMN TB_EMP_ENCRYPT.EMP_SEQ IS '직원 일련번호';
COMMENT ON COLUMN TB_EMP_ENCRYPT.ORIG_EMP_NO IS '원본 직원번호';
COMMENT ON COLUMN TB_EMP_ENCRYPT.ENCRYPT_EMP_NO IS '암호화된 직원번호';
COMMENT ON COLUMN TB_EMP_ENCRYPT.ORIG_EMP_NM IS '원본 직원명';
COMMENT ON COLUMN TB_EMP_ENCRYPT.RANDOM_EMP_NM IS '랜덤 변형 한글명';
COMMENT ON COLUMN TB_EMP_ENCRYPT.ORIG_EMP_EMAIL IS '직원 이메일 (암호화하지 않음)';
COMMENT ON COLUMN TB_EMP_ENCRYPT.ENCRYPT_ALGORITHM IS '암호화 알고리즘';
COMMENT ON COLUMN TB_EMP_ENCRYPT.ENCRYPT_KEY_ID IS '암호화 키 ID';
COMMENT ON COLUMN TB_EMP_ENCRYPT.ENCRYPT_IV IS '암호화 초기화 벡터';
COMMENT ON COLUMN TB_EMP_ENCRYPT.ENCRYPT_DATE IS '암호화 일시';
COMMENT ON COLUMN TB_EMP_ENCRYPT.DEL_YN IS '삭제 여부 (Y: 삭제, N: 사용)';
COMMENT ON COLUMN TB_EMP_ENCRYPT.DEL_DATE IS '삭제 일시';
COMMENT ON COLUMN TB_EMP_ENCRYPT.UPD_DATE IS '수정 일시';

CREATE INDEX IDX_EMP_ENCRYPT_KEY_ID ON TB_EMP_ENCRYPT (ENCRYPT_KEY_ID);
CREATE INDEX IDX_EMP_ENCRYPT_DATE ON TB_EMP_ENCRYPT (ENCRYPT_DATE);
CREATE INDEX IDX_EMP_ENCRYPT_RANDOM_NM ON TB_EMP_ENCRYPT (RANDOM_EMP_NM);
CREATE INDEX IDX_EMP_ENCRYPT_DEL_YN ON TB_EMP_ENCRYPT (DEL_YN);
CREATE INDEX IDX_EMP_ENCRYPT_EMAIL ON TB_EMP_ENCRYPT (ORIG_EMP_EMAIL);

-- 암호화 이력 테이블
CREATE TABLE TB_ENCRYPT_HISTORY (
    HIST_ID BIGSERIAL NOT NULL,
    EMP_SEQ BIGINT NOT NULL,
    ORIG_EMP_NO VARCHAR(100) NOT NULL,
    ENCRYPT_EMP_NO VARCHAR(255) NOT NULL,
    ORIG_EMP_NM VARCHAR(100) NOT NULL,
    RANDOM_EMP_NM VARCHAR(100) NOT NULL,
    ORIG_EMP_EMAIL VARCHAR(200),
    ENCRYPT_ALGORITHM VARCHAR(50) NOT NULL,
    ENCRYPT_KEY_ID VARCHAR(50),
    ENCRYPT_IV VARCHAR(100),
    OPERATION_TYPE VARCHAR(20) NOT NULL,
    OPERATION_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    OPERATOR_SEQ BIGINT,
    PRIMARY KEY (HIST_ID)
);

COMMENT ON TABLE TB_ENCRYPT_HISTORY IS '암호화 이력 테이블';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.HIST_ID IS '이력 ID';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.EMP_SEQ IS '직원 일련번호';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.ORIG_EMP_NO IS '원본 직원번호';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.ENCRYPT_EMP_NO IS '암호화된 직원번호';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.ORIG_EMP_NM IS '원본 직원명';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.RANDOM_EMP_NM IS '랜덤 변형 한글명';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.ORIG_EMP_EMAIL IS '직원 이메일 (암호화하지 않음)';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.ENCRYPT_ALGORITHM IS '암호화 알고리즘';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.ENCRYPT_KEY_ID IS '암호화 키 ID';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.ENCRYPT_IV IS '암호화 초기화 벡터';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.OPERATION_TYPE IS '작업 타입 (ENCRYPT: 암호화, DECRYPT: 복호화, DELETE: 삭제, RESTORE: 복구)';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.OPERATION_DATE IS '작업 일시';
COMMENT ON COLUMN TB_ENCRYPT_HISTORY.OPERATOR_SEQ IS '작업자 일련번호';

CREATE INDEX IDX_ENCRYPT_HISTORY_EMP_SEQ ON TB_ENCRYPT_HISTORY (EMP_SEQ);
CREATE INDEX IDX_ENCRYPT_HISTORY_OPERATION_DATE ON TB_ENCRYPT_HISTORY (OPERATION_DATE);

-- =====================================================
-- 샘플 데이터 삽입
-- =====================================================

-- 암호화 키 샘플 데이터
INSERT INTO TB_ENCRYPT_KEY (KEY_ID, KEY_NAME, KEY_VALUE, KEY_ALGORITHM, KEY_SIZE, IS_ACTIVE, EXPIRY_DATE) VALUES
-- ('KEY_001', '직원정보 암호화 키 1', 'MySecretKey123456789012345678901234567890', 'AES', 256, 'Y', CURRENT_TIMESTAMP + INTERVAL '1 year'),
-- ('KEY_002', '직원정보 암호화 키 2', 'AnotherSecretKey987654321098765432109876', 'AES', 256, 'Y', CURRENT_TIMESTAMP + INTERVAL '1 year');

-- 직원 암호화 샘플 데이터
-- INSERT INTO TB_EMP_ENCRYPT (EMP_SEQ, ORIG_EMP_NO, ENCRYPT_EMP_NO, ORIG_EMP_NM, RANDOM_EMP_NM, ENCRYPT_ALGORITHM, ENCRYPT_KEY_ID, ENCRYPT_IV) VALUES
-- (DEFAULT, '2024001', 'encrypted_emp_no_001', '홍길동', '김철수', 'AES', 'KEY_001', 'iv_001'),
-- (DEFAULT, '2024002', 'encrypted_emp_no_002', '김영희', '이민수', 'AES', 'KEY_001', 'iv_002'),
-- (DEFAULT, '2024003', 'encrypted_emp_no_003', '박지성', '최영희', 'AES', 'KEY_001', 'iv_003');

-- =====================================================
-- 통합 마스킹 뷰 생성 (직원번호와 직원명 마스킹)
-- =====================================================

-- 직원 정보 통합 마스킹 뷰 (삭제되지 않은 데이터만)
CREATE VIEW V_EMP_MASKED AS
SELECT 
    EMP_SEQ,
    -- 직원번호 마스킹 (첫글자 + **** + 마지막글자)
    CONCAT(LEFT(ORIG_EMP_NO, 1), '****', RIGHT(ORIG_EMP_NO, 1)) AS MASKED_EMP_NO,
    ORIG_EMP_NO AS ORIGINAL_EMP_NO,
    ENCRYPT_EMP_NO,
    -- 직원명 마스킹 (첫글자 + ** 또는 첫글자 + *)
    CASE 
        WHEN LENGTH(ORIG_EMP_NM) > 2 THEN 
            CONCAT(LEFT(ORIG_EMP_NM, 1), '**')
        WHEN LENGTH(ORIG_EMP_NM) = 2 THEN 
            CONCAT(LEFT(ORIG_EMP_NM, 1), '*')
        ELSE ORIG_EMP_NM
    END AS MASKED_EMP_NM,
    ORIG_EMP_NM AS ORIGINAL_EMP_NM,
    RANDOM_EMP_NM,
    -- 이메일 마스킹 (첫글자 + *** + @ + 도메인)
    CASE 
        WHEN ORIG_EMP_EMAIL IS NOT NULL AND POSITION('@' IN ORIG_EMP_EMAIL) > 1 THEN
            CONCAT(LEFT(ORIG_EMP_EMAIL, 1), '***', SUBSTRING(ORIG_EMP_EMAIL FROM POSITION('@' IN ORIG_EMP_EMAIL)))
        ELSE ORIG_EMP_EMAIL
    END AS MASKED_EMP_EMAIL,
    ORIG_EMP_EMAIL AS ORIGINAL_EMP_EMAIL
FROM TB_EMP_ENCRYPT
WHERE DEL_YN = 'N';

-- =====================================================
-- 함수 생성 (암호화 처리)
-- =====================================================

-- 직원 정보 암호화 저장 함수
CREATE OR REPLACE FUNCTION SP_INSERT_EMP_ENCRYPT(
    p_emp_seq BIGINT,
    p_orig_emp_no VARCHAR(100),
    p_encrypt_emp_no VARCHAR(255),
    p_orig_emp_nm VARCHAR(100),
    p_random_emp_nm VARCHAR(100),
    p_encrypt_algorithm VARCHAR(50),
    p_encrypt_key_id VARCHAR(50),
    p_encrypt_iv VARCHAR(100),
    p_operator_seq BIGINT
)
RETURNS VOID AS $$
BEGIN
    -- 직원 암호화 테이블에 삽입/업데이트
    INSERT INTO TB_EMP_ENCRYPT (
        EMP_SEQ, ORIG_EMP_NO, ENCRYPT_EMP_NO, ORIG_EMP_NM, RANDOM_EMP_NM,
        ENCRYPT_ALGORITHM, ENCRYPT_KEY_ID, ENCRYPT_IV
    ) VALUES (
        p_emp_seq, p_orig_emp_no, p_encrypt_emp_no, p_orig_emp_nm, p_random_emp_nm,
        p_encrypt_algorithm, p_encrypt_key_id, p_encrypt_iv
    ) ON CONFLICT (EMP_SEQ) DO UPDATE SET
        ORIG_EMP_NO = EXCLUDED.ORIG_EMP_NO,
        ENCRYPT_EMP_NO = EXCLUDED.ENCRYPT_EMP_NO,
        ORIG_EMP_NM = EXCLUDED.ORIG_EMP_NM,
        RANDOM_EMP_NM = EXCLUDED.RANDOM_EMP_NM,
        ENCRYPT_ALGORITHM = EXCLUDED.ENCRYPT_ALGORITHM,
        ENCRYPT_KEY_ID = EXCLUDED.ENCRYPT_KEY_ID,
        ENCRYPT_IV = EXCLUDED.ENCRYPT_IV,
        ENCRYPT_DATE = CURRENT_TIMESTAMP,
        UPD_DATE = CURRENT_TIMESTAMP;
    
    -- 암호화 이력에 기록
    INSERT INTO TB_ENCRYPT_HISTORY (
        EMP_SEQ, ORIG_EMP_NO, ENCRYPT_EMP_NO, ORIG_EMP_NM, RANDOM_EMP_NM,
        ENCRYPT_ALGORITHM, ENCRYPT_KEY_ID, ENCRYPT_IV,
        OPERATION_TYPE, OPERATOR_SEQ
    ) VALUES (
        p_emp_seq, p_orig_emp_no, p_encrypt_emp_no, p_orig_emp_nm, p_random_emp_nm,
        p_encrypt_algorithm, p_encrypt_key_id, p_encrypt_iv,
        'ENCRYPT', p_operator_seq
    );
END;
$$ LANGUAGE plpgsql;

-- 직원 정보 논리적 삭제 함수
CREATE OR REPLACE FUNCTION SP_DELETE_EMP_ENCRYPT(
    p_emp_seq BIGINT,
    p_operator_seq BIGINT
)
RETURNS VOID AS $$
BEGIN
    -- 직원 암호화 테이블 논리적 삭제
    UPDATE TB_EMP_ENCRYPT 
    SET DEL_YN = 'Y', 
        DEL_DATE = CURRENT_TIMESTAMP,
        UPD_DATE = CURRENT_TIMESTAMP
    WHERE EMP_SEQ = p_emp_seq AND DEL_YN = 'N';
    
    -- 삭제 이력에 기록
    INSERT INTO TB_ENCRYPT_HISTORY (
        EMP_SEQ, ORIG_EMP_NO, ENCRYPT_EMP_NO, ORIG_EMP_NM, RANDOM_EMP_NM,
        ENCRYPT_ALGORITHM, ENCRYPT_KEY_ID, ENCRYPT_IV,
        OPERATION_TYPE, OPERATOR_SEQ
    ) 
    SELECT EMP_SEQ, ORIG_EMP_NO, ENCRYPT_EMP_NO, ORIG_EMP_NM, RANDOM_EMP_NM,
           ENCRYPT_ALGORITHM, ENCRYPT_KEY_ID, ENCRYPT_IV,
           'DELETE', p_operator_seq
    FROM TB_EMP_ENCRYPT 
    WHERE EMP_SEQ = p_emp_seq;
END;
$$ LANGUAGE plpgsql;

-- 직원 정보 복구 함수
CREATE OR REPLACE FUNCTION SP_RESTORE_EMP_ENCRYPT(
    p_emp_seq BIGINT,
    p_operator_seq BIGINT
)
RETURNS VOID AS $$
BEGIN
    -- 직원 암호화 테이블 복구
    UPDATE TB_EMP_ENCRYPT 
    SET DEL_YN = 'N', 
        DEL_DATE = NULL,
        UPD_DATE = CURRENT_TIMESTAMP
    WHERE EMP_SEQ = p_emp_seq AND DEL_YN = 'Y';
    
    -- 복구 이력에 기록
    INSERT INTO TB_ENCRYPT_HISTORY (
        EMP_SEQ, ORIG_EMP_NO, ENCRYPT_EMP_NO, ORIG_EMP_NM, RANDOM_EMP_NM,
        ENCRYPT_ALGORITHM, ENCRYPT_KEY_ID, ENCRYPT_IV,
        OPERATION_TYPE, OPERATOR_SEQ
    ) 
    SELECT EMP_SEQ, ORIG_EMP_NO, ENCRYPT_EMP_NO, ORIG_EMP_NM, RANDOM_EMP_NM,
           ENCRYPT_ALGORITHM, ENCRYPT_KEY_ID, ENCRYPT_IV,
           'RESTORE', p_operator_seq
    FROM TB_EMP_ENCRYPT 
    WHERE EMP_SEQ = p_emp_seq;
END;
$$ LANGUAGE plpgsql;

