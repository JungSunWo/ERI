-- =====================================================
-- Spring Boot Batch 메타데이터 테이블 생성 (PostgreSQL)
-- =====================================================

-- Spring Boot 3.x 버전용 배치 메타데이터 테이블
-- PostgreSQL 데이터베이스에서 실행

-- 1. BATCH_JOB_INSTANCE 테이블
CREATE TABLE IF NOT EXISTS BATCH_JOB_INSTANCE (
    JOB_INSTANCE_ID BIGSERIAL PRIMARY KEY,
    VERSION BIGINT,
    JOB_NAME VARCHAR(100) NOT NULL,
    JOB_KEY VARCHAR(32) NOT NULL,
    CONSTRAINT JOB_INST_UN UNIQUE (JOB_NAME, JOB_KEY)
);

-- 2. BATCH_JOB_EXECUTION 테이블
CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION (
    JOB_EXECUTION_ID BIGSERIAL PRIMARY KEY,
    VERSION BIGINT,
    JOB_INSTANCE_ID BIGINT NOT NULL,
    CREATE_TIME TIMESTAMP NOT NULL,
    START_TIME TIMESTAMP,
    END_TIME TIMESTAMP,
    STATUS VARCHAR(10),
    EXIT_CODE VARCHAR(2500),
    EXIT_MESSAGE VARCHAR(2500),
    LAST_UPDATED TIMESTAMP,
    JOB_CONFIGURATION_LOCATION VARCHAR(2500),
    CONSTRAINT JOB_INST_EXEC_FK FOREIGN KEY (JOB_INSTANCE_ID)
    REFERENCES BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
);

-- 3. BATCH_JOB_EXECUTION_PARAMS 테이블
CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION_PARAMS (
    JOB_EXECUTION_ID BIGINT NOT NULL,
    PARAMETER_NAME VARCHAR(100) NOT NULL,
    PARAMETER_TYPE VARCHAR(100) NOT NULL,
    PARAMETER_VALUE VARCHAR(2500),
    IDENTIFYING CHAR(1) NOT NULL,
    CONSTRAINT JOB_EXEC_PARAMS_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- 4. BATCH_STEP_EXECUTION 테이블
CREATE TABLE IF NOT EXISTS BATCH_STEP_EXECUTION (
    STEP_EXECUTION_ID BIGSERIAL PRIMARY KEY,
    VERSION BIGINT NOT NULL,
    STEP_NAME VARCHAR(100) NOT NULL,
    JOB_EXECUTION_ID BIGINT NOT NULL,
    CREATE_TIME TIMESTAMP NOT NULL,
    START_TIME TIMESTAMP,
    END_TIME TIMESTAMP,
    STATUS VARCHAR(10),
    COMMIT_COUNT BIGINT,
    READ_COUNT BIGINT,
    FILTER_COUNT BIGINT,
    WRITE_COUNT BIGINT,
    READ_SKIP_COUNT BIGINT,
    WRITE_SKIP_COUNT BIGINT,
    PROCESS_SKIP_COUNT BIGINT,
    ROLLBACK_COUNT BIGINT,
    EXIT_CODE VARCHAR(2500),
    EXIT_MESSAGE VARCHAR(2500),
    LAST_UPDATED TIMESTAMP,
    CONSTRAINT JOB_EXEC_STEP_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- 5. BATCH_STEP_EXECUTION_SEQUENCE 테이블
CREATE TABLE IF NOT EXISTS BATCH_STEP_EXECUTION_SEQUENCE (
    ID BIGSERIAL PRIMARY KEY,
    UNIQUE_KEY CHAR(1) NOT NULL,
    CONSTRAINT STEP_EXEC_SEQ_UN UNIQUE (UNIQUE_KEY)
);

-- 6. BATCH_STEP_EXECUTION_CONTEXT 테이블
CREATE TABLE IF NOT EXISTS BATCH_STEP_EXECUTION_CONTEXT (
    STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT,
    CONSTRAINT STEP_EXEC_CTX_FK FOREIGN KEY (STEP_EXECUTION_ID)
    REFERENCES BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
);

-- 7. BATCH_JOB_EXECUTION_CONTEXT 테이블
CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION_CONTEXT (
    JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT,
    CONSTRAINT JOB_EXEC_CTX_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- 8. BATCH_STEP_EXECUTION_SEQUENCE 초기 데이터 삽입
INSERT INTO BATCH_STEP_EXECUTION_SEQUENCE (UNIQUE_KEY) VALUES ('0')
ON CONFLICT (UNIQUE_KEY) DO NOTHING;

-- =====================================================
-- 인덱스 생성 (성능 향상을 위해)
-- =====================================================

-- BATCH_JOB_INSTANCE 인덱스
CREATE INDEX IF NOT EXISTS IDX_JOB_INSTANCE_JOB_NAME ON BATCH_JOB_INSTANCE(JOB_NAME);
CREATE INDEX IF NOT EXISTS IDX_JOB_INSTANCE_JOB_KEY ON BATCH_JOB_INSTANCE(JOB_KEY);

-- BATCH_JOB_EXECUTION 인덱스
CREATE INDEX IF NOT EXISTS IDX_JOB_EXECUTION_JOB_INSTANCE_ID ON BATCH_JOB_EXECUTION(JOB_INSTANCE_ID);
CREATE INDEX IF NOT EXISTS IDX_JOB_EXECUTION_STATUS ON BATCH_JOB_EXECUTION(STATUS);
CREATE INDEX IF NOT EXISTS IDX_JOB_EXECUTION_CREATE_TIME ON BATCH_JOB_EXECUTION(CREATE_TIME);

-- BATCH_JOB_EXECUTION_PARAMS 인덱스
CREATE INDEX IF NOT EXISTS IDX_JOB_EXEC_PARAMS_JOB_EXECUTION_ID ON BATCH_JOB_EXECUTION_PARAMS(JOB_EXECUTION_ID);
CREATE INDEX IF NOT EXISTS IDX_JOB_EXEC_PARAMS_PARAM_NAME ON BATCH_JOB_EXECUTION_PARAMS(PARAMETER_NAME);

-- BATCH_STEP_EXECUTION 인덱스
CREATE INDEX IF NOT EXISTS IDX_STEP_EXECUTION_JOB_EXECUTION_ID ON BATCH_STEP_EXECUTION(JOB_EXECUTION_ID);
CREATE INDEX IF NOT EXISTS IDX_STEP_EXECUTION_STEP_NAME ON BATCH_STEP_EXECUTION(STEP_NAME);
CREATE INDEX IF NOT EXISTS IDX_STEP_EXECUTION_STATUS ON BATCH_STEP_EXECUTION(STATUS);

-- =====================================================
-- 뷰 생성 (편의를 위해)
-- =====================================================

-- Job 실행 현황 뷰
CREATE OR REPLACE VIEW V_BATCH_JOB_STATUS AS
SELECT 
    ji.JOB_INSTANCE_ID,
    ji.JOB_NAME,
    je.JOB_EXECUTION_ID,
    je.STATUS,
    je.CREATE_TIME,
    je.START_TIME,
    je.END_TIME,
    EXTRACT(EPOCH FROM (je.END_TIME - je.START_TIME)) AS DURATION_SECONDS,
    je.EXIT_CODE,
    je.EXIT_MESSAGE
FROM BATCH_JOB_INSTANCE ji
LEFT JOIN BATCH_JOB_EXECUTION je ON ji.JOB_INSTANCE_ID = je.JOB_INSTANCE_ID
ORDER BY je.CREATE_TIME DESC;

-- Step 실행 현황 뷰
CREATE OR REPLACE VIEW V_BATCH_STEP_STATUS AS
SELECT 
    se.STEP_EXECUTION_ID,
    se.STEP_NAME,
    se.JOB_EXECUTION_ID,
    se.STATUS,
    se.CREATE_TIME,
    se.START_TIME,
    se.END_TIME,
    EXTRACT(EPOCH FROM (se.END_TIME - se.START_TIME)) AS DURATION_SECONDS,
    se.READ_COUNT,
    se.WRITE_COUNT,
    se.READ_SKIP_COUNT,
    se.WRITE_SKIP_COUNT,
    se.PROCESS_SKIP_COUNT,
    se.ROLLBACK_COUNT,
    se.EXIT_CODE,
    se.EXIT_MESSAGE
FROM BATCH_STEP_EXECUTION se
ORDER BY se.CREATE_TIME DESC;

-- =====================================================
-- 권한 설정 (필요한 경우)
-- =====================================================

-- 애플리케이션 사용자에게 테이블 권한 부여
-- GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO nicdb;
-- GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO nicdb;

-- =====================================================
-- 테이블 생성 확인 쿼리
-- =====================================================

-- 생성된 테이블 목록 확인
SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name LIKE 'BATCH_%'
ORDER BY table_name;

-- 테이블 구조 확인
SELECT 
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'BATCH_JOB_INSTANCE'
ORDER BY ordinal_position; 